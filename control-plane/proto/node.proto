syntax = "proto3";

package nodepb;

option go_package = "github.com/thekrauss/Mini-CDN-DDoS-Lab-with-Go/control-plane/proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// Service principal pour le contrôle des nœuds de l’infrastructure
service NodeService {

  // Enregistrement initial d’un nœud dans le système
  rpc RegisterNode(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/register-node"
      body: "*"
    };
  }

  // Ping périodique des nœuds (heartbeat + metrics)
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      post: "/v1/ping"
      body: "*"
    };
  }

  // Vérifie que le control-plane est en ligne
  rpc HealthCheck(google.protobuf.Empty) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/health"
    };
  }

  // Récupération des journaux d’audit (actions admin)
  rpc GetAuditLogs(GetAuditLogsRequest) returns (GetAuditLogsResponse) {
    option (google.api.http) = {
      get: "/v1/nodes/audit-logs"
    };
  }

  // Liste des nœuds d’un tenant
  rpc ListNodesByTenant(TenantRequest) returns (NodeListResponse) {
    option (google.api.http) = {
      get: "/v1/nodes"
    };
  }

  // Mise à jour des métadonnées du nœud (IP, nom, tags…)
  rpc UpdateNodeMetadata(UpdateNodeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/nodes/{node_id}"
      body: "*"
    };
  }

  // Mise à jour manuelle du statut du nœud (offline, degraded…)
  rpc SetNodeStatus(NodeStatusRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/nodes/{node_id}/status"
      body: "*"
    };
  }

  // Récupération détaillée d’un nœud
  rpc GetNodeByID(GetNodeRequest) returns (Node) {
    option (google.api.http) = {
      get: "/v1/nodes/{node_id}"
    };
  }

  // Nombre de nœuds actifs sur une période
  rpc CountActiveNodes(CountActiveNodesRequest) returns (CountActiveNodesResponse) {
    option (google.api.http) = {
      get: "/v1/nodes/active_count"
    };
  }

  // Liste des nœuds blacklistés
  rpc ListBlacklistedNodes(ListNodesRequest) returns (ListNodesResponse) {
    option (google.api.http) = {
      get: "/v1/nodes/blacklisted"
    };
  }

  // Blacklister un nœud (temporairement désactivé)
  rpc BlacklistNode(NodeID) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/nodes/{node_id}/blacklist"
    };
  }

  // Enlever un nœud de la blacklist
  rpc UnblacklistNode(NodeID) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/nodes/{node_id}/unblacklist"
    };
  }

  // Rechercher des nœuds par tag, IP, nom…
  rpc SearchNodes(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      get: "/v1/nodes/search"
    };
  }

  rpc GetNodeConfig(GetNodeConfigRequest) returns (GetNodeConfigResponse) {
    option (google.api.http) = {
      get: "/v1/nodes/{node_id}/config"
    };
  }

  // Stream de commandes vers les nœuds
  rpc StreamCommands(stream CommandRequest) returns (stream Command);

  // Réception des résultats de commandes exécutées
  rpc ReportCommandResult(CommandResultRequest) returns (google.protobuf.Empty);

  // Un nœud signale une erreur système
  rpc ReportNodeError(NodeErrorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/nodes/{node_id}/errors"
      body: "*"
    };
  }

  // Historique des statuts d’un nœud
  rpc GetNodeStatusHistory(GetNodeRequest) returns (StatusHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/nodes/{node_id}/status-history"
    };
  }

  // Ajoute ou met à jour des annotations (métadonnées libres)
  rpc AnnotateNode(AnnotateNodeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/nodes/{node_id}/annotations"
      body: "*"
    };
  }

  // Déclenche une action sur le nœud (ex: restart, update)
  rpc TriggerNodeAction(NodeActionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/nodes/{node_id}/action"
      body: "*"
    };
  }
}


enum NodeStatus {
  NODE_STATUS_UNSPECIFIED = 0;
  NODE_ONLINE = 1;
  NODE_OFFLINE = 2;
  NODE_DEGRADED = 3;
}

message RegisterRequest {
  string node_id = 1;
  string ip = 2;
  string hostname = 3;
  string location = 4;
  string provider = 5;
  string version = 6;
  repeated string tags = 7;
  string id_tenant = 8;
}

message RegisterResponse {
  string message = 1;
  string node_id = 2;
}

message PingRequest {
  string node_id = 1;
  float cpu = 2;
  float memory = 3;
  int32 uptime_seconds = 4;
  int32 connections = 5;
  string status = 6; // healthy, slow, critical
}

message PingResponse {
  string status = 1; // ok, failed, warning
}

message GetAuditLogsRequest {
  int32 limit = 1;
  int32 offset = 2;
  optional string action = 3;
  optional string user_id = 4;
  optional string tenant_id = 5;
}

message AuditLogEntry {
  string id = 1;
  string user_id = 2;
  string role = 3;
  string action = 4;
  string target = 5;
  string details = 6;
  string ip_address = 7;
  string user_agent = 8;
  string tenant_id = 9;
  string timestamp = 10;
}

message GetAuditLogsResponse {
  repeated AuditLogEntry logs = 1;
  int32 total = 2;
}

message TenantRequest {
  string tenant_id = 1;
}

message NodeListResponse {
  repeated Node nodes = 1;
}

message UpdateNodeRequest {
  string node_id = 1;
  string name = 2;
  string ip = 3;
  map<string, string> tags = 4;
}

message NodeStatusRequest {
  string node_id = 1;
  NodeStatus status = 2;
}

message GetNodeRequest {
  string node_id = 1;
}

message NodeID {
  string node_id = 1;
}

message Node {
  string id = 1;
  string name = 2;
  string ip = 3;
  string tenant_id = 4;
  string status = 5;
  string location = 6;
  string provider = 7;
  string software_version = 8;
  repeated string tags = 9;
  string os = 10;
  string last_seen = 11;
  string created_at = 12;
  string updated_at = 13;
  bool is_blacklisted = 14;
}

message CommandRequest {
  string node_id = 1;
  string type = 2; // restart, update, etc.
  string payload = 3;
}

message Command {
  string id = 1;
  string type = 2;
  string payload = 3;
  string created_at = 4;
}

message CommandResultRequest {
  string command_id = 1;
  string node_id = 2;
  bool success = 3;
  string output = 4;
  string timestamp = 5;
}

message SearchRequest {
  string tenant_id = 1;
  string query = 2;
}

message SearchResponse {
  repeated Node nodes = 1;
}

message ListNodesRequest {
  string tenant_id = 1;
}

message ListNodesResponse {
  repeated Node nodes = 1;
}

message CountActiveNodesRequest {
  string tenant_id = 1;
  int32 since_seconds = 2; // 3600 pour 1h
}

message CountActiveNodesResponse {
  int32 count = 1;
}

// Requête pour reporter une erreur système côté nœud
message NodeErrorRequest {
  string node_id = 1;           // ID du nœud qui a rencontré l’erreur
  string error_message = 2;     // Description de l’erreur
  string error_type = 3;        // Type (network, cpu, disk, etc.)
  string occurred_at = 4;       // Timestamp au format RFC3339
}

// Requête pour déclencher une action sur un nœud
message NodeActionRequest {
  string node_id = 1;           // Nœud cible
  string action_type = 2;       // Ex: restart, update, reload
  map<string, string> params = 3; // Paramètres de l’action
}

// Réponse contenant l’historique des statuts d’un nœud
message StatusHistoryResponse {
  repeated NodeStatusEntry entries = 1;
}

message NodeStatusEntry {
  string status = 1;            // online, degraded, offline
  string timestamp = 2;         // RFC3339
}

// Réponse contenant la configuration du nœud (par ex. limites, intervalle de ping, etc.)
message NodeConfigResponse {
  string node_id = 1;
  int32 ping_interval_seconds = 2;
  float max_cpu = 3;
  float max_memory = 4;
  map<string, string> custom = 5; // configuration personnalisée
}

// Requête pour annoter un nœud avec des métadonnées libres
message AnnotateNodeRequest {
  string node_id = 1;
  map<string, string> annotations = 2; // Ex: {"datacenter": "eu-west-1", "rack": "R12"}
}

message GetNodeConfigRequest {
  string node_id = 1;
}

message GetNodeConfigResponse {
  string node_id = 1;
  int32 ping_interval = 2;
  int32 metrics_interval = 3;
  bool dynamic_config_enabled = 4;
  map<string, string> custom_labels = 5;
}